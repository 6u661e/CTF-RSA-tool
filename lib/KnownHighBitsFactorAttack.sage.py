
# This file was *autogenerated* from the file lib/KnownHighBitsFactorAttack.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_0p4 = RealNumber('0.4')
import sys

n = Integer(sys.argv[_sage_const_1 ])
p4 = Integer(sys.argv[_sage_const_2 ])
pbits = Integer(sys.argv[_sage_const_3 ]) if len(sys.argv) > _sage_const_3  else _sage_const_2 **(ceil(log_b(log_b(n,_sage_const_2 ),_sage_const_2 ))-_sage_const_1 )
kbits = pbits - p4.nbits()
p4 = p4 << kbits
PR = PolynomialRing(Zmod(n), names=('x',)); (x,) = PR._first_ngens(1)
f = x + p4
x0 = f.small_roots(X=_sage_const_2 **kbits, beta=_sage_const_0p4 )[_sage_const_0 ]
p = p4+x0
print(int(p))

