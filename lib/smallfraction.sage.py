
# This file was *autogenerated* from the file lib/smallfraction.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2000 = Integer(2000); _sage_const_0p5 = RealNumber('0.5'); _sage_const_50 = Integer(50)#!/usr/bin/env sage

# reference https://github.com/comaeio/OPCDE/blob/master/15%20ways%20to%20break%20RSA%20security%20-%20Renaud%20Lifchitz/opcde2017-ds-lifchitz-break_rsa.pdf

import sys

n = int(sys.argv[_sage_const_1 ])
depth=_sage_const_50 
t=len(bin(n).replace('0b',''))
nn = RealField(_sage_const_2000 )(n)
p = _sage_const_0 

x = PolynomialRing(Zmod(n),"x").gen()

try:
    for den in xrange(_sage_const_2 ,depth+_sage_const_1 ):
      for num in xrange(_sage_const_1 ,den):
        if gcd(num,den)==_sage_const_1 :
          r=Integer(den)/Integer(num); 
          phint = int(sqrt(nn*r))
          f = x - phint
          sr = f.small_roots(beta=_sage_const_0p5 )

          if len(sr)>_sage_const_0 :
            p = int(phint - sr[_sage_const_0 ])
            if n%p==_sage_const_0 :
              print(p)
              break
    if p == _sage_const_0 :
        print(p)
except:
    print(_sage_const_0 )
    pass

